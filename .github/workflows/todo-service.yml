name: CI/CD  Todo Service

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get update && sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin -y    

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Activate Service Account
        run: |
            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS

      - name: Print Service Account
        run: |
          gcloud auth list

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker ${{secrets.GCP_REGION}}-docker.pkg.dev


      - name: Build and push Docker image
        run: |
          cd todo-service
          IMAGE=${{secrets.GCP_REGION}}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/test/todo-service:${{ github.sha }}
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_CLUSTER_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          export IMAGE=${{secrets.GCP_REGION}}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/test/todo-service:${{ github.sha }}
          envsubst < todo-service.yaml | kubectl apply -f -
          
          # Create namespace if it doesn't exist
          kubectl create namespace todo-app --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply the Kubernetes manifest
          kubectl apply -f scripts/todo-service.yaml
          
          # Verify the deployment
          kubectl rollout status deployment/todo-service --namespace=todo-app
          
          # Get deployment details
          echo "Deployment details:"
          kubectl get deployments -n todo-app
          
          # Get pod status
          echo "Pod status:"
          kubectl get pods -n todo-app -o wide
          
          # Get service details and extract external IP
          echo "Service details:"
          kubectl get services -n todo-app
          
          # Wait for LoadBalancer to get an external IP (may take a few minutes)
          echo "Waiting for LoadBalancer to get an external IP..."
          for i in {1..20}; do
            EXTERNAL_IP=$(kubectl get service todo-service -n todo-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              break
            fi
            sleep 10
          done
          
          # Output the service URL
          if [ -n "$EXTERNAL_IP" ]; then
            echo "Service is available at: http://$EXTERNAL_IP:3001"
          else
            echo "Could not retrieve external IP for the service within the timeout period"
            exit 1
          fi